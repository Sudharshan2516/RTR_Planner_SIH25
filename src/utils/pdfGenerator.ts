import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export interface ReportData {
  projectName: string;
  location: string;
  roofArea: number;
  dwellers: number;
  harvestPotential: {
    annualHarvest: number;
    annualRainfall: number;
    waterQuality: number;
    runoffCoefficient: number;
  };
  structure: {
    type: string;
    capacity: number;
    cost: number;
    installationDays: number;
    dimensions: {
      length: number;
      width: number;
      height: number;
    };
  };
  costAnalysis: {
    totalCost: number;
    annualSavings: number;
    paybackPeriod: number;
    roi: number;
  };
  generatedAt: string;
  userName: string;
}

const addLetterhead = (pdf: jsPDF, pageWidth: number) => {
  // Header background
  pdf.setFillColor(16, 185, 129); // Green background
  pdf.rect(0, 0, pageWidth, 50, 'F');
  
  // Company logo area (water droplet shape simulation)
  pdf.setFillColor(255, 255, 255);
  pdf.circle(25, 25, 8, 'F');
  
  // Droplet icon simulation with text
  pdf.setTextColor(16, 185, 129);
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'bold');
  pdf.text('üíß', 21, 29);
  
  // Company name and tagline
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(24);
  pdf.setFont('helvetica', 'bold');
  pdf.text('AquaHarvest', 45, 25);
  
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  pdf.text('Rooftop Rainwater Harvesting Solutions', 45, 35);
  
  // Contact information on the right
  pdf.setFontSize(8);
  pdf.text('Email: info@aquaharvest.com', pageWidth - 80, 20);
  pdf.text('Phone: +91 9876543210', pageWidth - 80, 28);
  pdf.text('Web: www.aquaharvest.com', pageWidth - 80, 36);
  
  // Decorative line
  pdf.setDrawColor(255, 255, 255);
  pdf.setLineWidth(0.5);
  pdf.line(20, 45, pageWidth - 20, 45);
  
  return 60; // Return the Y position after letterhead
};

const addFooter = (pdf: jsPDF, pageWidth: number, pageHeight: number, pageNumber: number = 1) => {
  // Footer background
  pdf.setFillColor(243, 244, 246); // Light gray background
  pdf.rect(0, pageHeight - 30, pageWidth, 30, 'F');
  
  // Footer line
  pdf.setDrawColor(16, 185, 129);
  pdf.setLineWidth(1);
  pdf.line(20, pageHeight - 28, pageWidth - 20, pageHeight - 28);
  
  // Footer text
  pdf.setTextColor(75, 85, 99);
  pdf.setFontSize(8);
  pdf.setFont('helvetica', 'normal');
  pdf.text('This report is generated by AquaHarvest AI-powered assessment system', 20, pageHeight - 20);
  pdf.text('Confidential and proprietary information - Not for redistribution', 20, pageHeight - 15);
  
  // Page number and date
  pdf.text(`Page ${pageNumber}`, pageWidth - 40, pageHeight - 20);
  pdf.text(`Generated on ${new Date().toLocaleDateString()}`, pageWidth - 80, pageHeight - 15);
  
  // Certification mark
  pdf.setTextColor(16, 185, 129);
  pdf.setFont('helvetica', 'bold');
  pdf.text('‚úì AI Verified Assessment', pageWidth - 120, pageHeight - 8);
};

const addWatermark = (pdf: jsPDF, pageWidth: number, pageHeight: number) => {
  pdf.saveGraphicsState();
  pdf.setGState(pdf.GState({ opacity: 0.1 }));
  pdf.setTextColor(16, 185, 129);
  pdf.setFontSize(60);
  pdf.setFont('helvetica', 'bold');
  
  // Rotate and add watermark
  const centerX = pageWidth / 2;
  const centerY = pageHeight / 2;
  pdf.text('AquaHarvest', centerX, centerY, { 
    angle: 45, 
    align: 'center' 
  });
  
  pdf.restoreGraphicsState();
};

export const generatePDFReport = async (data: ReportData, language: string = 'english'): Promise<void> => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // Add letterhead
  let yPos = addLetterhead(pdf, pageWidth);
  
  // Add watermark
  addWatermark(pdf, pageWidth, pageHeight);
  
  // Report title with decorative elements
  yPos += 10;
  pdf.setFillColor(59, 130, 246); // Blue background for title
  pdf.rect(20, yPos - 5, pageWidth - 40, 20, 'F');
  
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(16);
  pdf.setFont('helvetica', 'bold');
  const title = language === 'hindi' ? '‡§µ‡§∞‡•ç‡§∑‡§æ ‡§ú‡§≤ ‡§∏‡§Ç‡§ö‡§Ø‡§® ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü' :
                language === 'telugu' ? '‡∞µ‡∞∞‡±ç‡∞∑‡∞™‡±Å ‡∞®‡±Ä‡∞ü‡∞ø ‡∞∏‡±á‡∞ï‡∞∞‡∞£ ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞®‡∞ø‡∞µ‡±á‡∞¶‡∞ø‡∞ï' :
                'RAINWATER HARVESTING ASSESSMENT REPORT';
  pdf.text(title, pageWidth / 2, yPos + 8, { align: 'center' });
  
  yPos += 30;
  
  // Project Information Section with styled box
  pdf.setFillColor(248, 250, 252); // Light blue background
  pdf.setDrawColor(59, 130, 246);
  pdf.setLineWidth(0.5);
  pdf.rect(20, yPos, pageWidth - 40, 60, 'FD');
  
  pdf.setTextColor(59, 130, 246);
  pdf.setFontSize(14);
  pdf.setFont('helvetica', 'bold');
  const projectInfoTitle = language === 'hindi' ? '‡§™‡§∞‡§ø‡§Ø‡•ã‡§ú‡§®‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£' :
                          language === 'telugu' ? '‡∞™‡±ç‡∞∞‡∞æ‡∞ú‡±Ü‡∞ï‡±ç‡∞ü‡±ç ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡±Å' :
                          'PROJECT INFORMATION';
  pdf.text(projectInfoTitle, 25, yPos + 10);
  
  yPos += 20;
  pdf.setFontSize(11);
  pdf.setTextColor(0, 0, 0);
  pdf.setFont('helvetica', 'normal');
  
  const projectInfo = [
    [`Project Name: ${data.projectName}`, `‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü ‡§®‡§æ‡§Æ: ${data.projectName}`, `‡∞™‡±ç‡∞∞‡∞æ‡∞ú‡±Ü‡∞ï‡±ç‡∞ü‡±ç ‡∞™‡±á‡∞∞‡±Å: ${data.projectName}`],
    [`Location: ${data.location}`, `‡§∏‡•ç‡§•‡§æ‡§®: ${data.location}`, `‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞Ç: ${data.location}`],
    [`Roof Area: ${data.roofArea} sq.m`, `‡§õ‡§§ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞: ${data.roofArea} ‡§µ‡§∞‡•ç‡§ó ‡§Æ‡•Ä`, `‡∞™‡±à‡∞ï‡∞™‡±ç‡∞™‡±Å ‡∞µ‡±à‡∞∂‡∞æ‡∞≤‡±ç‡∞Ø‡∞Ç: ${data.roofArea} ‡∞ö.‡∞Æ‡±Ä`],
    [`Number of People: ${data.dwellers}`, `‡§≤‡•ã‡§ó‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ: ${data.dwellers}`, `‡∞µ‡±ç‡∞Ø‡∞ï‡±ç‡∞§‡±Å‡∞≤ ‡∞∏‡∞Ç‡∞ñ‡±ç‡∞Ø: ${data.dwellers}`]
  ];
  
  const langIndex = language === 'hindi' ? 1 : language === 'telugu' ? 2 : 0;
  
  // Two column layout for project info
  const leftCol = 25;
  const rightCol = pageWidth / 2 + 10;
  
  projectInfo.forEach((info, index) => {
    const xPos = index % 2 === 0 ? leftCol : rightCol;
    const yOffset = Math.floor(index / 2) * 8;
    pdf.text(info[langIndex], xPos, yPos + yOffset);
  });
  
  yPos += 50;
  
  // Harvest Potential Section with chart-like visualization
  pdf.setFillColor(16, 185, 129); // Green background
  pdf.rect(20, yPos, pageWidth - 40, 8, 'F');
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(14);
  pdf.setFont('helvetica', 'bold');
  const harvestTitle = language === 'hindi' ? '‡§∏‡§Ç‡§ö‡§Ø‡§® ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£' :
                      language === 'telugu' ? '‡∞∏‡±á‡∞ï‡∞∞‡∞£ ‡∞∏‡∞æ‡∞Æ‡∞∞‡±ç‡∞•‡±ç‡∞Ø ‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞£' :
                      'HARVEST POTENTIAL ANALYSIS';
  pdf.text(harvestTitle, 25, yPos + 6);
  
  yPos += 20;
  
  // Key metrics with visual indicators
  const metrics = [
    {
      label: language === 'hindi' ? '‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§∏‡§Ç‡§ö‡§Ø‡§®' : language === 'telugu' ? '‡∞µ‡∞æ‡∞∞‡±ç‡∞∑‡∞ø‡∞ï ‡∞∏‡±á‡∞ï‡∞∞‡∞£' : 'Annual Harvest',
      value: `${data.harvestPotential.annualHarvest.toLocaleString()} L`,
      color: [16, 185, 129]
    },
    {
      label: language === 'hindi' ? '‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§µ‡§∞‡•ç‡§∑‡§æ' : language === 'telugu' ? '‡∞µ‡∞æ‡∞∞‡±ç‡∞∑‡∞ø‡∞ï ‡∞µ‡∞∞‡±ç‡∞∑‡∞™‡∞æ‡∞§‡∞Ç' : 'Annual Rainfall',
      value: `${data.harvestPotential.annualRainfall} mm`,
      color: [59, 130, 246]
    },
    {
      label: language === 'hindi' ? '‡§ú‡§≤ ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ' : language === 'telugu' ? '‡∞®‡±Ä‡∞ü‡∞ø ‡∞®‡∞æ‡∞£‡±ç‡∞Ø‡∞§' : 'Water Quality',
      value: `${data.harvestPotential.waterQuality}%`,
      color: [245, 158, 11]
    },
    {
      label: language === 'hindi' ? '‡§¶‡§ï‡•ç‡§∑‡§§‡§æ ‡§ó‡•Å‡§£‡§æ‡§Ç‡§ï' : language === 'telugu' ? '‡∞∏‡∞æ‡∞Æ‡∞∞‡±ç‡∞•‡±ç‡∞Ø ‡∞ó‡±Å‡∞£‡∞ï‡∞Ç' : 'Efficiency Factor',
      value: `${(data.harvestPotential.runoffCoefficient * 100).toFixed(0)}%`,
      color: [139, 92, 246]
    }
  ];
  
  metrics.forEach((metric, index) => {
    const xPos = 25 + (index % 2) * (pageWidth / 2 - 20);
    const yOffset = Math.floor(index / 2) * 25;
    
    // Metric box
    pdf.setFillColor(...metric.color);
    pdf.rect(xPos, yPos + yOffset, 80, 18, 'F');
    
    pdf.setTextColor(255, 255, 255);
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'bold');
    pdf.text(metric.label, xPos + 5, yPos + yOffset + 8);
    
    pdf.setFontSize(12);
    pdf.text(metric.value, xPos + 5, yPos + yOffset + 15);
  });
  
  yPos += 60;
  
  // Structure Recommendation Section
  pdf.setFillColor(139, 92, 246); // Purple background
  pdf.rect(20, yPos, pageWidth - 40, 8, 'F');
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(14);
  pdf.setFont('helvetica', 'bold');
  const structureTitle = language === 'hindi' ? '‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®' :
                         language === 'telugu' ? '‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å ‡∞ö‡±á‡∞∏‡∞ø‡∞® ‡∞®‡∞ø‡∞∞‡±ç‡∞Æ‡∞æ‡∞£ ‡∞™‡∞∞‡∞ø‡∞∑‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç' :
                         'RECOMMENDED STRUCTURE SOLUTION';
  pdf.text(structureTitle, 25, yPos + 6);
  
  yPos += 20;
  
  // Structure details in a styled box
  pdf.setFillColor(250, 245, 255); // Light purple background
  pdf.setDrawColor(139, 92, 246);
  pdf.rect(20, yPos, pageWidth - 40, 50, 'FD');
  
  pdf.setTextColor(0, 0, 0);
  pdf.setFontSize(11);
  pdf.setFont('helvetica', 'normal');
  
  const structureData = [
    [`System Type: ${data.structure.type.replace(/_/g, ' ').toUpperCase()}`,
     `‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞: ${data.structure.type.replace(/_/g, ' ').toUpperCase()}`,
     `‡∞∏‡∞ø‡∞∏‡±ç‡∞ü‡∞Æ‡±ç ‡∞∞‡∞ï‡∞Ç: ${data.structure.type.replace(/_/g, ' ').toUpperCase()}`],
    [`Storage Capacity: ${data.structure.capacity.toLocaleString()} Liters`,
     `‡§≠‡§Ç‡§°‡§æ‡§∞‡§£ ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ: ${data.structure.capacity.toLocaleString()} ‡§≤‡•Ä‡§ü‡§∞`,
     `‡∞®‡∞ø‡∞≤‡±ç‡∞µ ‡∞∏‡∞æ‡∞Æ‡∞∞‡±ç‡∞•‡±ç‡∞Ø‡∞Ç: ${data.structure.capacity.toLocaleString()} ‡∞≤‡±Ä‡∞ü‡∞∞‡±ç‡∞≤‡±Å`],
    [`Investment Required: ‚Çπ${data.structure.cost.toLocaleString()}`,
     `‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§®‡§ø‡§µ‡•á‡§∂: ‚Çπ${data.structure.cost.toLocaleString()}`,
     `‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Æ‡±à‡∞® ‡∞™‡±Ü‡∞ü‡±ç‡∞ü‡±Å‡∞¨‡∞°‡∞ø: ‚Çπ${data.structure.cost.toLocaleString()}`],
    [`Installation Period: ${data.structure.installationDays} Days`,
     `‡§∏‡•ç‡§•‡§æ‡§™‡§®‡§æ ‡§Ö‡§µ‡§ß‡§ø: ${data.structure.installationDays} ‡§¶‡§ø‡§®`,
     `‡∞á‡∞®‡±ç‚Äå‡∞∏‡±ç‡∞ü‡∞æ‡∞≤‡±á‡∞∑‡∞®‡±ç ‡∞ï‡∞æ‡∞≤‡∞Ç: ${data.structure.installationDays} ‡∞∞‡±ã‡∞ú‡±Å‡∞≤‡±Å`]
  ];
  
  structureData.forEach((info, index) => {
    const xPos = 25 + (index % 2) * (pageWidth / 2 - 20);
    const yOffset = Math.floor(index / 2) * 10;
    pdf.text(info[langIndex], xPos, yPos + 10 + yOffset);
  });
  
  yPos += 65;
  
  // Financial Analysis Section
  pdf.setFillColor(245, 158, 11); // Orange background
  pdf.rect(20, yPos, pageWidth - 40, 8, 'F');
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(14);
  pdf.setFont('helvetica', 'bold');
  const financialTitle = language === 'hindi' ? '‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§è‡§µ‡§Ç ‡§≤‡§æ‡§≠' :
                         language === 'telugu' ? '‡∞Ü‡∞∞‡±ç‡∞•‡∞ø‡∞ï ‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞£ ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞≤‡∞æ‡∞≠‡∞æ‡∞≤‡±Å' :
                         'FINANCIAL ANALYSIS & BENEFITS';
  pdf.text(financialTitle, 25, yPos + 6);
  
  yPos += 20;
  
  // ROI visualization
  const roiWidth = (data.costAnalysis.roi / 100) * 120;
  pdf.setFillColor(220, 252, 231); // Light green background
  pdf.rect(25, yPos, 120, 8, 'F');
  pdf.setFillColor(16, 185, 129); // Green fill for ROI
  pdf.rect(25, yPos, roiWidth, 8, 'F');
  
  pdf.setTextColor(0, 0, 0);
  pdf.setFontSize(10);
  const roiLabel = language === 'hindi' ? `‡§®‡§ø‡§µ‡•á‡§∂ ‡§™‡§∞ ‡§∞‡§ø‡§ü‡§∞‡•ç‡§®: ${data.costAnalysis.roi}%` :
                   language === 'telugu' ? `‡∞™‡±Ü‡∞ü‡±ç‡∞ü‡±Å‡∞¨‡∞°‡∞ø‡∞™‡±à ‡∞∞‡∞æ‡∞¨‡∞°‡∞ø: ${data.costAnalysis.roi}%` :
                   `Return on Investment: ${data.costAnalysis.roi}%`;
  pdf.text(roiLabel, 25, yPos + 15);
  
  yPos += 25;
  
  const financialData = [
    [`Total Investment: ‚Çπ${data.costAnalysis.totalCost.toLocaleString()}`,
     `‡§ï‡•Å‡§≤ ‡§®‡§ø‡§µ‡•á‡§∂: ‚Çπ${data.costAnalysis.totalCost.toLocaleString()}`,
     `‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç ‡∞™‡±Ü‡∞ü‡±ç‡∞ü‡±Å‡∞¨‡∞°‡∞ø: ‚Çπ${data.costAnalysis.totalCost.toLocaleString()}`],
    [`Annual Water Savings: ‚Çπ${data.costAnalysis.annualSavings.toLocaleString()}`,
     `‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§ú‡§≤ ‡§¨‡§ö‡§§: ‚Çπ${data.costAnalysis.annualSavings.toLocaleString()}`,
     `‡∞µ‡∞æ‡∞∞‡±ç‡∞∑‡∞ø‡∞ï ‡∞®‡±Ä‡∞ü‡∞ø ‡∞Ü‡∞¶‡∞æ: ‚Çπ${data.costAnalysis.annualSavings.toLocaleString()}`],
    [`Payback Period: ${data.costAnalysis.paybackPeriod} Years`,
     `‡§µ‡§æ‡§™‡§∏‡•Ä ‡§Ö‡§µ‡§ß‡§ø: ${data.costAnalysis.paybackPeriod} ‡§µ‡§∞‡•ç‡§∑`,
     `‡∞§‡∞ø‡∞∞‡∞ø‡∞ó‡∞ø ‡∞∞‡∞æ‡∞µ‡∞°‡∞Ç ‡∞ï‡∞æ‡∞≤‡∞Ç: ${data.costAnalysis.paybackPeriod} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤‡±Å`]
  ];
  
  financialData.forEach((info, index) => {
    pdf.text(info[langIndex], 25, yPos + (index * 8));
  });
  
  yPos += 35;
  
  // Environmental Impact Section
  pdf.setFillColor(34, 197, 94); // Bright green
  pdf.rect(20, yPos, pageWidth - 40, 25, 'F');
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'bold');
  const envTitle = language === 'hindi' ? 'üåç ‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ' :
                   language === 'telugu' ? 'üåç ‡∞™‡∞∞‡±ç‡∞Ø‡∞æ‡∞µ‡∞∞‡∞£ ‡∞™‡±ç‡∞∞‡∞≠‡∞æ‡∞µ‡∞Ç' :
                   'üåç ENVIRONMENTAL IMPACT';
  pdf.text(envTitle, 25, yPos + 8);
  
  const co2Saved = Math.round(data.harvestPotential.annualHarvest * 0.0003);
  const envText = language === 'hindi' ? `${co2Saved} ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ CO‚ÇÇ ‡§¨‡§ö‡§§ ‡§™‡•ç‡§∞‡§§‡§ø ‡§µ‡§∞‡•ç‡§∑ ‚Ä¢ ‡§ú‡§≤ ‡§∏‡•ç‡§µ‡§§‡§Ç‡§§‡•ç‡§∞‡§§‡§æ ‡§Æ‡•á‡§Ç ‡§Ø‡•ã‡§ó‡§¶‡§æ‡§® ‚Ä¢ ‡§≠‡•Ç‡§ú‡§≤ ‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§£` :
                  language === 'telugu' ? `${co2Saved} ‡∞ï‡∞ø‡∞≤‡±ã‡∞≤ CO‚ÇÇ ‡∞Ü‡∞¶‡∞æ ‡∞™‡±ç‡∞∞‡∞§‡∞ø ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç ‚Ä¢ ‡∞®‡±Ä‡∞ü‡∞ø ‡∞∏‡±ç‡∞µ‡∞æ‡∞§‡∞Ç‡∞§‡±ç‡∞∞‡±ç‡∞Ø‡∞Ç‡∞≤‡±ã ‡∞∏‡∞π‡∞ï‡∞æ‡∞∞‡∞Ç ‚Ä¢ ‡∞≠‡±Ç‡∞ó‡∞∞‡±ç‡∞≠ ‡∞ú‡∞≤ ‡∞∏‡∞Ç‡∞∞‡∞ï‡±ç‡∞∑‡∞£` :
                  `${co2Saved} kg CO‚ÇÇ Saved Annually ‚Ä¢ Water Independence ‚Ä¢ Groundwater Conservation`;
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  pdf.text(envText, 25, yPos + 18);
  
  // Add footer
  addFooter(pdf, pageWidth, pageHeight, 1);
  
  // Save the PDF with enhanced filename
  const timestamp = new Date().toISOString().split('T')[0];
  const fileName = `AquaHarvest-Assessment-${data.projectName.replace(/\s+/g, '-').toLowerCase()}-${timestamp}.pdf`;
  pdf.save(fileName);
};

export const generateReportFromElement = async (elementId: string, filename: string): Promise<void> => {
  const element = document.getElementById(elementId);
  if (!element) {
    throw new Error('Element not found');
  }
  
  const canvas = await html2canvas(element, {
    scale: 2,
    useCORS: true,
    allowTaint: true
  });
  
  const imgData = canvas.toDataURL('image/png');
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // Add letterhead to element-based reports too
  addLetterhead(pdf, pageWidth);
  
  const imgWidth = pageWidth - 20;
  const imgHeight = (canvas.height * imgWidth) / canvas.width;
  let heightLeft = imgHeight;
  
  let position = 60; // Start after letterhead
  
  pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
  heightLeft -= (pageHeight - 90); // Account for letterhead and footer space
  
  let pageNumber = 1;
  while (heightLeft >= 0) {
    position = heightLeft - imgHeight + 60; // Account for letterhead
    pdf.addPage();
    pageNumber++;
    addLetterhead(pdf, pageWidth);
    pdf.addImage(imgData, 'PNG', 10, 60, imgWidth, imgHeight);
    addFooter(pdf, pageWidth, pageHeight, pageNumber);
    heightLeft -= (pageHeight - 90);
  }
  
  // Add footer to first page
  pdf.setPage(1);
  addFooter(pdf, pageWidth, pageHeight, 1);
  
  pdf.save(filename);
};